name: Rerun Checks on Marketing Version Change

on:
  push:
    branches:
      - '**'

jobs:
  check-version-change:
    runs-on: ubuntu-latest

    permissions:
      actions: write
      contents: read
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get previous version of the file
        id: previous_version
        run: |
          git fetch origin $(echo ${{ github.ref_name }})~1
          PREVIOUS_VERSION="v"$(sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}' HEAD~1:project.pbxproj)
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV
        continue-on-error: true

      - name: Get current version of the file
        id: current_version
        run: |
          CURRENT_VERSION="v"$(sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}' Fril.xcodeproj/project.pbxproj)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          if [ "${{ env.PREVIOUS_VERSION }}" != "${{ env.CURRENT_VERSION }}" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Skip if version not changed
        if: env.version_changed != 'true'
        run: echo "Marketing version has not changed. Exiting..."

      - name: Fetch open pull requests targeting the branch
        id: pr_list
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            return pullRequests
              .filter(pr => pr.base.ref === branch)
              .map(pr => pr.number);
          result-encoding: string

      - name: Skip if no pull requests found
        if: steps.pr_list.outputs.result == '[]'
        run: echo "No open pull requests targeting the branch. Exiting..."

      - name: Trigger workflow for matching PRs
        if: env.version_changed == 'true' && steps.pr_list.outputs.result != '[]'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumbers = JSON.parse(`{{ steps.pr_list.outputs.result }}`);
            for (const prNumber of prNumbers) {
              await github.rest.repos.createDispatchEvent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                event_type: 'rerun-tests',
                client_payload: { pull_request_number: prNumber }
              });
            }
