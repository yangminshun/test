name: Update branch for pull requests if needed

on:
  push:
    branches:
      - main

jobs:
  if-version-is-changed:
    runs-on: ubuntu-latest

    permissions: write-all

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Get previous version of the file
        id: previous_version
        run: |
          PREVIOUS_VERSION=$(git show HEAD~1:project.pbxproj | sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}')
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

      - name: Get current version of the file
        id: current_version
        run: |
          CURRENT_VERSION=$(sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}' project.pbxproj)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Compare versions
        id: version_check
        run: |
          if [ "${{ env.PREVIOUS_VERSION }}" != "${{ env.CURRENT_VERSION }}" ]; then
            echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          else
            echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          fi

      - name: Skip if version not changed
        if: env.VERSION_CHANGED != 'true'
        run: echo "Marketing version has not changed."

      - name: Fetch open pull requests targeting the branch
        if: env.VERSION_CHANGED == 'true'
        id: pr_list
        uses: actions/github-script@v6
        with:
          script: |
            const branch = context.ref.replace('refs/heads/', '');
            const { data: pullRequests } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            return pullRequests
              .filter(pr => pr.base.ref === branch)
              .map(pr => pr.number);
          result-encoding: string

      - name: Skip if no pull request found
        if: steps.pr_list.outputs.result == ''
        run: echo "No open pull requests targeting the branch. Exiting..."

      - name: Update branch for matched pull requests
        if: steps.pr_list.outputs.result != ''
        uses: actions/github-script@v6
        with:
          script: |
            const prNumbers = "${{ steps.pr_list.outputs.result }}".split(',').map(pr => pr.trim());
            for (const prNumber of prNumbers) {
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: parseInt(prNumber)
              });

              if (pr.data.mergeable) {
                await github.rest.pulls.updateBranch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: parseInt(prNumber)
                });
              }
            }
