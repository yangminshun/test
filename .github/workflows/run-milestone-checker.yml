name: Run milestone checker

on:
  workflow_dispatch:
    inputs:
      prNumber:
        description: 'Pull Request Number'
        required: true
        type: string
  pull_request:
    types: [opened, reopened, edited, synchronize, milestoned, demilestoned]
    branches:
      - main
      - release/*

jobs:
  run-milestone-checker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get PR number (event_name == 'pull_request')
      if: github.event_name == 'pull_request'
      id: get_pr_number_1
      run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV

    - name: Get PR number (event_name == 'workflow_dispatch')
      if: github.event_name == 'issue_comment'
      id: get_pr_number_2
      run: echo "PR_NUMBER=${{ github.event.inputs.prNumber }}" >> $GITHUB_ENV

    - name: Get milestone version
      id: get_milestone_version
      run: |
        MILESTONE_VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${{ env.PR_NUMBER }}" | jq -r .milestone.title)
        echo "MILESTONE_VERSION=$MILESTONE_VERSION" >> $GITHUB_ENV

    - name: Get product version
      id: get_product_version
      run: |
        PRODUCT_VERSION="v"$(sed -n '/MARKETING_VERSION/{s/MARKETING_VERSION = //;s/;//;s/^[[:space:]]*//;p;q;}' project.pbxproj)
        echo "PRODUCT_VERSION=$PRODUCT_VERSION" >> $GITHUB_ENV

    - name: Compare versions
      id: compare_versions
      run: |
        MILESTONE_VER=${{ env.MILESTONE_VERSION }}
        PRODUCT_VER=${{ env.PRODUCT_VERSION }}
        RESULT=$(php -r 'echo version_compare("'"$MILESTONE_VER"'", "'"$PRODUCT_VER"'", "==") ? "true" : "false";')
        echo "VERSION_MATCH=$RESULT" >> $GITHUB_ENV
      shell: bash

    - name: Set Status to Success (event_name == 'pull_request')
      if: ${{ env.VERSION_MATCH == 'true' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: "success",
            context: "milestone check",
            description: "Passed"
          });

    - name: Set Status to Failure (event_name == 'pull_request')
      if: ${{ env.VERSION_MATCH == 'false' && github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: "failure",
            context: "milestone check",
            description: "Failed"
          });

    - name: Set Status to Success (event_name == 'issue_comment')
      if: ${{ env.VERSION_MATCH == 'true' && github.event_name == 'issue_comment' }}
      uses: actions/github-script@v6
      with:
        script: |
          const pullRequestUrl = context.payload.issue.pull_request.url;
          const pullRequest = await github.request(pullRequestUrl);
          const sha = pullRequest.data.head.sha;
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: "success",
            context: "milestone check",
            description: "Passed"
          });

    - name: Set Status to Failure (event_name == 'issue_comment')
      if: ${{ env.VERSION_MATCH == 'false' && github.event_name == 'issue_comment' }}
      uses: actions/github-script@v6
      with:
        script: |
          const pullRequestUrl = context.payload.issue.pull_request.url;
          const pullRequest = await github.request(pullRequestUrl);
          const sha = pullRequest.data.head.sha;
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: sha,
            state: "failure",
            context: "milestone check",
            description: "Failed"
          });
